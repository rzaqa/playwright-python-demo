{"uid":"ecf648d1592921b7","name":"AUTH-ADMIN-LOGIN-001: Successful admin login with valid credentials","fullName":"tests.e2e.test_admin_login_success#test_admin_login_success","historyId":"b4b54322ee1a4e9c8971895909286f83","time":{"start":1761765710213,"stop":1761765710213,"duration":0},"description":"Verifies that an admin can log in successfully and reach the Dashboard.","descriptionHtml":"<p>Verifies that an admin can log in successfully and reach the Dashboard.</p>\n","status":"broken","statusMessage":"playwright._impl._errors.TargetClosedError: BrowserType.launch: Target page, context or browser has been closed\nBrowser logs:\n\n╔═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗\n║ Firefox is unable to launch if the $HOME folder isn't owned by the current user.                                  ║\n║ Workaround: Set the HOME=/root environment variable in your GitHub Actions workflow file when running Playwright. ║\n╚═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝\nCall log:\n  - <launching> /ms-playwright/firefox-1490/firefox/firefox -no-remote -headless -profile /tmp/playwright_firefoxdev_profile-hi2py7 -juggler-pipe -silent\n  - <launched> pid=2796\n  - [pid=2796][err] [2796] Sandbox: CanCreateUserNamespace() clone() failure: EPERM\n  - [pid=2796][err] Running Nightly as root in a regular user's session is not supported.  ($HOME is /github/home which is owned by uid 1001.)\n  - [pid=2796] <process did exit: exitCode=1, signal=null>\n  - [pid=2796] starting temporary directories cleanup\n  - [pid=2796] <gracefully close start>\n  - [pid=2796] finished temporary directories cleanup\n  - [pid=2796] <gracefully close end>","statusTrace":"request = <SubRequest 'browser' for <Function test_admin_login_success[firefox]>>\n\n    @pytest.fixture(scope=\"session\", params=config[\"browsers\"])\n    def browser(request):\n        \"\"\"Launch each browser type (chromium, firefox, webkit) once per session.\"\"\"\n        browser_name = request.param\n        with sync_playwright() as p:\n            browser_type = getattr(p, browser_name)\n>           browser = browser_type.launch(headless=config[\"headless\"])\n\ntests/conftest.py:22: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n/usr/local/lib/python3.10/dist-packages/playwright/sync_api/_generated.py:14502: in launch\n    self._sync(\n/usr/local/lib/python3.10/dist-packages/playwright/_impl/_browser_type.py:98: in launch\n    await self._channel.send(\n/usr/local/lib/python3.10/dist-packages/playwright/_impl/_connection.py:69: in send\n    return await self._connection.wrap_api_call(\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ \n\nself = <playwright._impl._connection.Connection object at 0x7f74776ab280>\ncb = <function Channel.send.<locals>.<lambda> at 0x7f74761a1120>\nis_internal = False, title = None\n\n    async def wrap_api_call(\n        self, cb: Callable[[], Any], is_internal: bool = False, title: str = None\n    ) -> Any:\n        if self._api_zone.get():\n            return await cb()\n        task = asyncio.current_task(self._loop)\n        st: List[inspect.FrameInfo] = getattr(\n            task, \"__pw_stack__\", None\n        ) or inspect.stack(0)\n    \n        parsed_st = _extract_stack_trace_information_from_stack(st, is_internal, title)\n        self._api_zone.set(parsed_st)\n        try:\n            return await cb()\n        except Exception as error:\n>           raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\nE           playwright._impl._errors.TargetClosedError: BrowserType.launch: Target page, context or browser has been closed\nE           Browser logs:\nE           \nE           ╔═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗\nE           ║ Firefox is unable to launch if the $HOME folder isn't owned by the current user.                                  ║\nE           ║ Workaround: Set the HOME=/root environment variable in your GitHub Actions workflow file when running Playwright. ║\nE           ╚═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝\nE           Call log:\nE             - <launching> /ms-playwright/firefox-1490/firefox/firefox -no-remote -headless -profile /tmp/playwright_firefoxdev_profile-hi2py7 -juggler-pipe -silent\nE             - <launched> pid=2796\nE             - [pid=2796][err] [2796] Sandbox: CanCreateUserNamespace() clone() failure: EPERM\nE             - [pid=2796][err] Running Nightly as root in a regular user's session is not supported.  ($HOME is /github/home which is owned by uid 1001.)\nE             - [pid=2796] <process did exit: exitCode=1, signal=null>\nE             - [pid=2796] starting temporary directories cleanup\nE             - [pid=2796] <gracefully close start>\nE             - [pid=2796] finished temporary directories cleanup\nE             - [pid=2796] <gracefully close end>\n\n/usr/local/lib/python3.10/dist-packages/playwright/_impl/_connection.py:558: TargetClosedError","flaky":false,"newFailed":false,"newBroken":false,"newPassed":false,"retriesCount":0,"retriesStatusChange":false,"beforeStages":[{"name":"_verify_url","time":{"start":1761765703664,"stop":1761765703664,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"base_url","time":{"start":1761765703664,"stop":1761765703664,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"delete_output_dir","time":{"start":1761765703665,"stop":1761765703665,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"pytestconfig","time":{"start":1761765703665,"stop":1761765703665,"duration":0},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false},{"name":"browser","time":{"start":1761765710243,"stop":1761765710580,"duration":337},"status":"broken","statusMessage":"playwright._impl._errors.TargetClosedError: BrowserType.launch: Target page, context or browser has been closed\nBrowser logs:\n\n╔═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════╗\n║ Firefox is unable to launch if the $HOME folder isn't owned by the current user.                                  ║\n║ Workaround: Set the HOME=/root environment variable in your GitHub Actions workflow file when running Playwright. ║\n╚═══════════════════════════════════════════════════════════════════════════════════════════════════════════════════╝\nCall log:\n  - <launching> /ms-playwright/firefox-1490/firefox/firefox -no-remote -headless -profile /tmp/playwright_firefoxdev_profile-hi2py7 -juggler-pipe -silent\n  - <launched> pid=2796\n  - [pid=2796][err] [2796] Sandbox: CanCreateUserNamespace() clone() failure: EPERM\n  - [pid=2796][err] Running Nightly as root in a regular user's session is not supported.  ($HOME is /github/home which is owned by uid 1001.)\n  - [pid=2796] <process did exit: exitCode=1, signal=null>\n  - [pid=2796] starting temporary directories cleanup\n  - [pid=2796] <gracefully close start>\n  - [pid=2796] finished temporary directories cleanup\n  - [pid=2796] <gracefully close end>\n\n","statusTrace":"  File \"/usr/local/lib/python3.10/dist-packages/pluggy/_callers.py\", line 38, in run_old_style_hookwrapper\n    res = yield\n  File \"/usr/local/lib/python3.10/dist-packages/pluggy/_callers.py\", line 139, in _multicall\n    teardown.throw(exception)\n  File \"/usr/local/lib/python3.10/dist-packages/_pytest/setuponly.py\", line 36, in pytest_fixture_setup\n    return (yield)\n  File \"/usr/local/lib/python3.10/dist-packages/pluggy/_callers.py\", line 121, in _multicall\n    res = hook_impl.function(*args)\n  File \"/usr/local/lib/python3.10/dist-packages/_pytest/fixtures.py\", line 1196, in pytest_fixture_setup\n    result = call_fixture_func(fixturefunc, request, kwargs)\n  File \"/usr/local/lib/python3.10/dist-packages/_pytest/fixtures.py\", line 923, in call_fixture_func\n    fixture_result = next(generator)\n  File \"/__w/playwright-python-demo/playwright-python-demo/tests/conftest.py\", line 22, in browser\n    browser = browser_type.launch(headless=config[\"headless\"])\n  File \"/usr/local/lib/python3.10/dist-packages/playwright/sync_api/_generated.py\", line 14502, in launch\n    self._sync(\n  File \"/usr/local/lib/python3.10/dist-packages/playwright/_impl/_sync_base.py\", line 115, in _sync\n    return task.result()\n  File \"/usr/local/lib/python3.10/dist-packages/playwright/_impl/_browser_type.py\", line 98, in launch\n    await self._channel.send(\n  File \"/usr/local/lib/python3.10/dist-packages/playwright/_impl/_connection.py\", line 69, in send\n    return await self._connection.wrap_api_call(\n  File \"/usr/local/lib/python3.10/dist-packages/playwright/_impl/_connection.py\", line 558, in wrap_api_call\n    raise rewrite_error(error, f\"{parsed_st['apiName']}: {error}\") from None\n","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":true,"stepsCount":0,"attachmentsCount":0,"hasContent":true,"attachmentStep":false},{"name":"page","time":{"start":1761765711393,"stop":1761765711998,"duration":605},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"afterStages":[{"name":"page::0","time":{"start":1761765717342,"stop":1761765717347,"duration":5},"status":"passed","steps":[],"attachments":[],"parameters":[],"shouldDisplayMessage":false,"stepsCount":0,"attachmentsCount":0,"hasContent":false,"attachmentStep":false}],"labels":[{"name":"feature","value":"E2E UI tests - Admin SignIn"},{"name":"tag","value":"AUTH-ADMIN-LOGIN-001"},{"name":"tag","value":"positive"},{"name":"tag","value":"e2e"},{"name":"tag","value":"smoke"},{"name":"tag","value":"ui"},{"name":"parentSuite","value":"tests.e2e"},{"name":"suite","value":"test_admin_login_success"},{"name":"host","value":"ca5a75b48026"},{"name":"thread","value":"2715-MainThread"},{"name":"framework","value":"pytest"},{"name":"language","value":"cpython3"},{"name":"package","value":"tests.e2e.test_admin_login_success"},{"name":"resultFormat","value":"allure2"}],"parameters":[{"name":"browser","value":"'firefox'"}],"links":[],"hidden":false,"retry":false,"extra":{"severity":"normal","retries":[],"categories":[{"name":"Test defects","matchedStatuses":[]}],"tags":["ui","smoke","e2e","positive","AUTH-ADMIN-LOGIN-001"]},"source":"ecf648d1592921b7.json","parameterValues":["'firefox'"]}